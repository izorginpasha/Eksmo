import requests
import json
import re
import pandas as pd
from pathlib import Path
prompt = """
–¢—ã ‚Äî –∑–≤—É–∫–æ–≤–æ–π –¥–∏–∑–∞–π–Ω–µ—Ä.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–±–∑–∞—Ü –∏ —Ä–∞–∑–±–µ–π –µ–≥–æ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–≤—É–∫–æ–≤—ã–µ —Å—Ü–µ–Ω—ã. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã —É–∫–∞–∂–∏:

1. üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã (2‚Äì4 —Å–ª–æ–≤–∞)
2. üìñ –¢–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã (—Å–∫–æ–ø–∏—Ä—É–π –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∞–±–∑–∞—Ü–∞)
3. üîä –ö–∞–∫–∏–µ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É
   - –∏–º—è —Ñ–∞–π–ª–∞ –∑–≤—É–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–Ω–∞–∑–≤–∞–Ω–∏–µ.wav`
   - –≥—Ä–æ–º–∫–æ—Å—Ç—å (`volume`: –æ—Ç -20 –¥–æ 0)
   - –ø–∞–Ω–æ—Ä–∞–º–∞ (`pan`: –æ—Ç -1.0 –¥–æ 1.0)
4. ‚è± –í—Ä–µ–º—è (start ‚Äì end) –≤ —Å–µ–∫—É–Ω–¥–∞—Ö ‚Äî –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:

üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã  
–¢–µ–∫—Å—Ç:  
"...—Å—é–∂–µ—Ç —Å—Ü–µ–Ω—ã..."

üîä –ó–≤—É–∫–∏:  
- sound_1.wav (volume: -6, pan: -0.5)  
- sound_2.wav (volume: -3, pan: 0.3)



üìú –í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:

"–î–∂–æ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª –≥–ª–∞–∑–∞, –∞ —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞–ª, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–∫—Ä—É–≥. –ê –≤–æ–∫—Ä—É–≥ –±—ã–ª —à—É–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ä–∞—Å—Ç–∞–ª —Å –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥–æ–π. –®—É–º —ç—Ç–æ—Ç —Å–æ—Å—Ç–æ—è–ª –∏–∑ –º–Ω–æ–≥–∏—Ö –∑–≤—É–∫–æ–≤: –≥—Ä–æ–º–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ª—é–¥–µ–π, –≤—Å–ø–ª–µ—Å–∫–∏ –º–æ—Ä—Å–∫–∏—Ö –≤–æ–ª–Ω, —Å–∫—Ä–µ–∂–µ—Ç –∂–µ–ª–µ–∑–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤, –∫—Ä–∏–∫–∏ —á–∞–µ–∫, —Ç–æ–ø–æ—Ç –Ω–æ–≥, —Å–≤–∏—Å—Ç –≤–µ—Ç—Ä–∞, —Å–∫—Ä–∏–ø –¥–æ—Å–æ–∫ –∏ –º–Ω–æ–≥–∏—Ö-–º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö. –ó–≤—É–∫ –æ—Ç —à–∞–≥–æ–≤ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Ö –Ω—ë—Å, —Ç–æ–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è. –°–Ω–∞—á–∞–ª–∞ –æ–Ω–∏ –±—ã–ª–∏ –ø–æ—á—Ç–∏ –Ω–µ —Å–ª—ã—à–Ω—ã–µ, —á—É—Ç—å-—á—É—Ç—å —à–∞—Ä–∫–∞—é—â–∏–µ, –≤–∏–¥–∏–º–æ, –æ–Ω —à—ë–ª –ø–æ –∑–µ–º–ª–µ, –∞ —Ç–µ–ø–µ—Ä—å –º–∞–ª–æ —Ç–æ–≥–æ, —á—Ç–æ —Å—Ç–∞–ª–∏ –æ—á–µ–Ω—å –≥—Ä–æ–º–∫–∏–µ, —Ç–∞–∫ –µ—â—ë –∏ –∫–∞–∂–¥—ã–π —à–∞–≥ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª—Å—è –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–º –∂–µ–ª–µ–∑–Ω—ã–º —ç—Ö–æ–º. –Ø—â–∏–∫ –ø–æ—Å—Ç–∞–≤–∏–ª–∏, –∏ —à–∞–≥–∏ –Ω–∞—á–∞–ª–∏ –æ—Ç–¥–∞–ª—è—Ç—å—Å—è, –ø–æ–∫–∞ —Å–æ–≤—Å–µ–º –Ω–µ —Å—Ç–∏—Ö–ª–∏. –ë–æ–ª—å—à–µ –∫ –Ω–∏–º –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏–ª, –∏, —Å—É–¥—è –ø–æ –∑–≤—É–∫–∞–º, —Ä—è–¥–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ. –î–∂–æ, –ø–æ–¥–æ–∂–¥–∞–≤ –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, —Ä–µ—à–∏–ª –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞."
"""

response = requests.post(
    "http://localhost:11434/api/generate",
    json={"model": "mistral:latest", "prompt": prompt, "stream": False}
)

data = response.json()
print(data["response"])

def parse_scene_response_to_excel(text: str, output_file: str = "output/scene_from_prompt.xlsx"):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ —Å—Ç–∏–ª–µ:
    üé¨ –°—Ü–µ–Ω–∞
    –¢–µ–∫—Å—Ç: ...
    üîä –ó–≤—É–∫–∏: ...
    –í—Ä–µ–º—è: X.0 ‚Äì Y.0 —Å–µ–∫

    –ò —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–æ –≤ Excel-—Ç–∞–±–ª–∏—Ü—É
    """
    scenes = []
    current_scene = None
    current_text = ""
    start_time, end_time = None, None

    lines = text.strip().splitlines()
    i = 0
    while i < len(lines):
        line = lines[i].strip()

        if line.startswith("üé¨"):
            current_scene = line.replace("üé¨", "").strip()
            current_text = ""
            start_time, end_time = None, None
            i += 1

        elif line.startswith("–¢–µ–∫—Å—Ç:"):
            current_text = line.replace("–¢–µ–∫—Å—Ç:", "").strip()
            i += 1

        elif line.startswith("üîä") or line.startswith("- "):
            i += 1
            while i < len(lines) and lines[i].strip().startswith("- "):
                s_line = lines[i].strip()
                match = re.search(r'([\w\-]+\.wav).*?volume:\s*(-?\d+).*?pan:\s*(-?\d*\.?\d+)', s_line)
                if match:
                    sound = match.group(1)
                    volume = int(match.group(2))
                    pan = float(match.group(3))
                    scenes.append({
                        "scene": current_scene,
                        "sound": sound,
                        "start": start_time,
                        "end": end_time,
                        "volume": volume,
                        "pan": pan,
                        "text": current_text
                    })
                i += 1

        elif line.lower().startswith("–≤—Ä–µ–º—è"):
            time_match = re.search(r'([\d\.]+)\s*[-‚Äì]\s*([\d\.]+)', line)
            if time_match:
                start_time = float(time_match.group(1))
                end_time = float(time_match.group(2))
                for s in reversed(scenes):
                    if s["start"] is None:
                        s["start"] = start_time
                        s["end"] = end_time
                    else:
                        break
            i += 1
        else:
            i += 1

    df = pd.DataFrame(scenes)
    output_path = Path(output_file)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    df.to_excel(output_path, index=False)
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ü–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
    return output_path

parse_scene_response_to_excel(data["response"])