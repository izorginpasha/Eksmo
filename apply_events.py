from pydub import AudioSegment
from pydub.generators import Sine, WhiteNoise
from pathlib import Path
import pandas as pd
import hashlib

def generate_synthetic_sound(fx_path: Path):
    """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–≤—É–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
    name = fx_path.stem.lower()
    hash_val = int(hashlib.md5(name.encode()).hexdigest(), 16)

    # –ü—Å–µ–≤–¥–æ-—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    freq = 200 + (hash_val % 800)        # —á–∞—Å—Ç–æ—Ç–∞: 200‚Äì1000 –ì—Ü
    dur = 5000 + (hash_val % 1000)        # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 300‚Äì1300 –º—Å
    is_noise = "noise" in name or "wind" in name or "static" in name

    if is_noise:
        sound = WhiteNoise().to_audio_segment(duration=dur).fade_in(100).fade_out(100)
    else:
        sound = Sine(freq).to_audio_segment(duration=dur).fade_in(100).fade_out(100)

    try:
        sound.export(fx_path, format="wav")
        print(f"üîß –ê–≤—Ç–æ-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–≤—É–∫: {fx_path.name} ({freq} –ì—Ü, {dur} –º—Å)")
        return fx_path
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {fx_path.name}: {e}")
        return None


def mix_effects(audio_path, fx_dir, events_path="events.xlsx", output_path="result.wav"):
    try:
        voice = AudioSegment.from_file(audio_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return

    try:
        df = pd.read_excel(events_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {events_path}: {e}")
        return

    if df.empty:
        print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç–∞.")
        return

    max_end_ms = (df["start_ms"] + df["duration_ms"]).max()
    total_duration = max(len(voice), max_end_ms)
    print(f"üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Å–∞: {total_duration / 1000:.2f} —Å–µ–∫")

    if total_duration > len(voice):
        voice += AudioSegment.silent(duration=total_duration - len(voice))

    fx_track = AudioSegment.silent(duration=total_duration)
    applied = 0

    for index, row in df.iterrows():
        fx_path = fx_dir / str(row["sound"])

        if not fx_path.exists():
            print(f"‚ö†Ô∏è [{index}] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {fx_path}")
            # fx_path = generate_synthetic_sound(fx_path)
            if not fx_path or not fx_path.exists():
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å

        try:
            fx = AudioSegment.from_wav(fx_path)
            fx_duration = int(row["duration_ms"])
            if len(fx) > fx_duration:
                fx = fx[:fx_duration]

            fx += float(row["volume_db"])
            fx = fx.fade_in(300).fade_out(500)

            start_ms = int(row["start_ms"])
            fx_track = fx_track.overlay(fx, position=start_ms)
            print(f"‚úÖ [{index}] {fx_path.name} ‚Üí {start_ms} –º—Å | {len(fx)} –º—Å | dB")
            applied += 1

        except Exception as e:
            print(f"‚ùå [{index}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {fx_path.name}: {e}")

    if applied == 0:
        print("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω—ë–Ω.")
        return

    try:
        final = voice.overlay(fx_track)
        final.export(output_path, format="wav")
        print(f"üéß –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def main():
    audio_path = "audio/voice.mp3"
    fx_dir = Path("audio/fx")
    fx_dir.mkdir(parents=True, exist_ok=True)
    mix_effects(audio_path, fx_dir)


if __name__ == "__main__":
    main()
