from pydub import AudioSegment
from pydub.generators import Sine, WhiteNoise
from pathlib import Path
import pandas as pd
import hashlib
import webbrowser

def apply_pan(audio: AudioSegment, pan_value: float) -> AudioSegment:
    try:
        return audio.pan(pan_value)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞–Ω–æ—Ä–∞–º—ã ({pan_value}): {e}")
        return audio

def mix_effects(audio_path, fx_dir, events_path="events.xlsx", output_path="result.wav"):
    try:
        voice = AudioSegment.from_file(audio_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return

    try:
        df = pd.read_excel(events_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {events_path}: {e}")
        return

    if df.empty:
        print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç–∞.")
        return

    required_columns = {"sound", "start_ms", "duration_ms", "volume_db"}
    for col in required_columns:
        if col not in df.columns:
            print(f"‚ùå –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞: {col}")
            return

    max_end_ms = (df["start_ms"] + df["duration_ms"]).max()
    total_duration = max(len(voice), max_end_ms)
    print(f"üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Å–∞: {total_duration / 1000:.2f} —Å–µ–∫")

    if total_duration > len(voice):
        voice += AudioSegment.silent(duration=total_duration - len(voice))

    fx_track = AudioSegment.silent(duration=total_duration)
    applied = 0

    for index, row in df.iterrows():
        def load_sound(name_column: str):
            filename = str(row[name_column]).strip()
            if not filename.endswith(".wav"):
                filename += ".wav"
            fx_path = fx_dir / filename

            if fx_path.exists():
                return AudioSegment.from_wav(fx_path)

            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—â–µ–º –≤—Ä—É—á–Ω—É—é –≤ BBC
            base_name = filename.replace("_", " ").replace(".wav", "")
            bbc_url = f"https://sound-effects.bbcrewind.co.uk/search?q={base_name}"
            print(f"‚ùó [{index}] –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∏—Å–∫ –≤ BBC: {bbc_url}")
            try:
                webbrowser.open(bbc_url)
            except:
                pass
            return None

        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        fx = load_sound("sound")
        if fx is None:
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        fx_duration = int(row["duration_ms"])
        if len(fx) > fx_duration:
            fx = fx[:fx_duration]

        # –ì—Ä–æ–º–∫–æ—Å—Ç—å
        fx += float(row.get("volume_db", 0))

        # –ü–∞–Ω–æ—Ä–∞–º–∞
        pan = float(row.get("pan", 0.0))
        fx = apply_pan(fx, pan)

        # –§–µ–π–¥—ã
        fx = fx.fade_in(300).fade_out(500)

        # –í—Å—Ç–∞–≤–∫–∞
        start_ms = int(row["start_ms"])
        fx_track = fx_track.overlay(fx, position=start_ms)
        print(f"‚úÖ [{index}] {row['sound']} ‚Üí {start_ms} –º—Å | {fx_duration} –º—Å | vol: {row['volume_db']} | pan: {pan}")
        applied += 1

        # –§–æ–Ω–æ–≤—ã–π —à—É–º
        bg_name = row.get("background_noise", "")
        if pd.notna(bg_name) and str(bg_name).strip():
            bg = load_sound("background_noise")
            if bg:
                bg = bg - 10  # –¥–µ–ª–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –∑–≤—É–∫ —Ç–∏—à–µ
                fx_track = fx_track.overlay(bg, position=start_ms)
                print(f"üéß –î–æ–±–∞–≤–ª–µ–Ω —Ñ–æ–Ω: {bg_name}")

    if applied == 0:
        print("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω—ë–Ω.")
        return

    try:
        final = voice.overlay(fx_track)
        final.export(output_path, format="wav")
        print(f"üéß –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def main():
    audio_path = "audio/voice.mp3"
    fx_dir = Path("audio/fx")
    fx_dir.mkdir(parents=True, exist_ok=True)
    mix_effects(audio_path, fx_dir)

if __name__ == "__main__":
    main()
